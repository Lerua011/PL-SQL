create or replace
PROCEDURE asignarCita(
   pIdPeticion IN NUMBER,
   pIdPaciente IN NUMBER,
   pIdDoctor IN NUMBER,
   pFechaCita IN TIMESTAMP,
   pCantidadCitas IN NUMBER,
   pPudoConcertar OUT NUMBER
) AS
  pCita NUMBER;
  vModifiedFechaCita TIMESTAMP; -- Declare a local variable
BEGIN
   -- Find the maximum idCita for the given doctor
   SELECT NVL(MAX(idCita), 0) + 1 INTO pCita
   FROM tablas_citas.citas;

   -- Set the time part to 8 AM and handle any potential time differences
   vModifiedFechaCita := TRUNC(pFechaCita) + INTERVAL '8' HOUR;

   -- Check if the doctor has available slots for appointments on the given date
   IF pCantidadCitas < 1 THEN
      -- Insert a new appointment record
      INSERT INTO tablas_citas.citas (idCita, idPaciente, idDoctor, fecha)
      VALUES (pCita, pIdPaciente, pIdDoctor, vModifiedFechaCita);
      pPudoConcertar := 1; -- Appointment was successfully scheduled
      UPDATE tablas_citas.peticiones
        SET estado = 1
        WHERE idPeticion = pIdPeticion;
   ELSE
      pPudoConcertar := 0; -- Doctor has reached the maximum number of appointments for the given date
   END IF;
END;

---------------------------------------------------------------------------------------------------------------

create or replace
PROCEDURE asignarCita2(
   pIdPeticion IN NUMBER,
   pIdPaciente IN NUMBER,
   pIdDoctor IN NUMBER,
   pFechaCita IN TIMESTAMP,
   pCantidadCitas IN NUMBER,
   pPudoConcertar OUT NUMBER
) AS
  pCita NUMBER;
  vModifiedFechaCita TIMESTAMP; -- Declare a local variable
BEGIN
   -- Find the maximum idCita for the given doctor
   SELECT NVL(MAX(idCita), 0) + 1 INTO pCita
   FROM tablas_citas.citas;

   -- Set the time part to 8 AM
   vModifiedFechaCita := TRUNC(pFechaCita) + INTERVAL '10' HOUR;

   -- Check if the doctor has available slots for appointments on the given date
   IF pCantidadCitas < 2 THEN
      -- Insert a new appointment record
      INSERT INTO tablas_citas.citas (idCita, idPaciente, idDoctor, fecha)
      VALUES (pCita, pIdPaciente, pIdDoctor, vModifiedFechaCita);
      pPudoConcertar := 1; -- Appointment was successfully scheduled
      UPDATE tablas_citas.peticiones
        SET estado = 1
        WHERE idPeticion = pIdPeticion;
   ELSE
      pPudoConcertar := 0; -- Doctor has reached the maximum number of appointments for the given date
   END IF;

   COMMIT;  -- Commit the transaction
END;

----------------------------------------------------------------------------------------------------------------------

create or replace
PROCEDURE MoverRechazados(
   pIdPeticion IN NUMBER,
   pIdPaciente IN NUMBER,
   pEspecialidad IN CHAR,
   pFechaInicio IN DATE,
   pFechaFin IN DATE
) AS
 
BEGIN
   -- Insert rejected petitions into the 'rechazados' table
   INSERT INTO tablas_citas.rechazados(idPeticion, idPaciente, especialidad, fechaInicio, fechaFin)
   VALUES (pIdPeticion, pIdPaciente, pEspecialidad, pFechaInicio, pFechaFin);
 
   -- Commit the transaction
   COMMIT;
END;

-----------------------------------------------------------------------------------------------------------------------

create or replace
PROCEDURE rechazar(pIdPeticion IN NUMBER) AS
BEGIN
 
   -- Update the state of the given petition to rejected
   UPDATE tablas_citas.peticiones
   SET estado = -1  -- Use an appropriate code for rejected state, e.g., -1
   WHERE idPeticion = pIdPeticion;
 
   COMMIT;  -- Commit the transaction
END;

-----------------------------------------------------------------------------------------------------------------------------

create or replace
procedure reservaCita as
-- Cursor que obtiene las peticiones
cursor cPeticiones is 
   select idPeticion,
          idPaciente,
          especialidad,
          fechaInicio,
          fechaFin,
          estado
   from tablas_citas.peticiones
   where estado = 0
   order by 1;
-- Cursor que obtiene los doctores de la especialidad solicitada
cursor cDoctores(vEspecialidad varchar) is 
   select idDoctor
   from tablas_citas.doctores  
   where especialidad = vEspecialidad
   order by 1;
-- Registro para recorrer el cursor de doctores
rCDoctores cDoctores%rowType;
-- Indicador si la cita se pudo concertar (boolena)
vCitaConcertada number;
-- Contiene la fecha que se revisa para la búsqueda de citas
vFechaPorRevisar TIMESTAMP;
-- Indicador de si la cita se pudo concertar
vPudoConcertar number;
-- Cantidad de citas de un doctor en una fecha particular
vCantidadCitas number;
 
Begin 
   -- Para cada peticion  -- cursor trae peticiones con estado 0 procesado por FOR  
   for rCPeticiones in cPeticiones loop
      --si existePaciente(peticion.idPaciente)
      if existePaciente(rCPeticiones.idPaciente) = 1 then 
         --si existeEspecialidad(peticion.especialidad)
         if existeEspecialidad(rCPeticiones.especialidad) = 1 then
            --buscar los doctores con la especialidad solicitada
            open cDoctores(rCPeticiones.especialidad); --> idDoctor 
            --inicia sin cita
            vCitaConcertada := 0;
            -- mientras hayanDoctoresPorRevisar y citaConcertada = 0
            --recorrer el cursor de los doctores
            loop
               --obtiene el siguiente doctor
               fetch cDoctores into rCDoctores;
               --se sale cuando no haya más doctores
               exit when cDoctores%notFound;
               --iniciar la revisión por fechas
               vFechaPorRevisar := rCPeticiones.fechaInicio;
               --recorrer el rango de citas
               loop
                  --obtener la cantidad de citas por doctor en una fecha
                  vCantidadCitas := cantidadCitasDoctor(rCDoctores.idDoctor,vFechaPorRevisar);
                  if vCantidadCitas < 1 then
                  -- intenta asignar cita en la fechaPorRevisar, resultado booleano en pudoConcertar
                   asignarCita(rCPeticiones.idPeticion, rCPeticiones.idPaciente, rCDoctores.idDoctor,vFechaPorRevisar,vCantidadCitas, vPudoConcertar);
                   vCitaConcertada := vPudoConcertar;
                    if vCitaConcertada = 1 then
                      exit;
                    end if;
                  elsif vCantidadCitas < 2 then
                    asignarCita2(rCPeticiones.idPeticion, rCPeticiones.idPaciente, rCDoctores.idDoctor,vFechaPorRevisar,vCantidadCitas, vPudoConcertar);
                    vCitaConcertada := vPudoConcertar;
                  --terminar si la cita se concertó
                  if vCitaConcertada = 1 then
                     exit;
                    end if;
                  end if;
                  vFechaPorRevisar := vFechaPorRevisar + 1;
                  --terminar si la fecha por revisar se sale del rango
                  if  vFechaPorRevisar > rCPeticiones.fechaFin then  
                     exit;
                  end if;
               end loop; -- loop de fechas por doctor
               --terminar si la cita se concertó
               if vCitaConcertada = 1 then
                  exit;
               end if;
            end loop; -- loop de doctores
            --cerrar el cursor de doctores
            close cDoctores;
            --se rechaza la cita después de explorar todos los doctores y el rango de fechas
            if vCitaConcertada = 0 then
               rechazar(rCPeticiones.idPeticion);
               MoverRechazados(rCPeticiones.idPeticion, rCPeticiones.idPaciente, rCPeticiones.especialidad, rCPeticiones.fechaInicio, rCPeticiones.fechaFin);
            end if; 
         else -- existeEspecialidad
             rechazar(rCPeticiones.idPeticion);
             MoverRechazados(rCPeticiones.idPeticion, rCPeticiones.idPaciente, rCPeticiones.especialidad, rCPeticiones.fechaInicio, rCPeticiones.fechaFin);
         end if;
      else -- existePaciente
          rechazar(rCPeticiones.idPeticion);
          MoverRechazados(rCPeticiones.idPeticion, rCPeticiones.idPaciente, rCPeticiones.especialidad, rCPeticiones.fechaInicio, rCPeticiones.fechaFin);
      end if;
   end loop;
end;
